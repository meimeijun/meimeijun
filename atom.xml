<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>山中小屋</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dword.top/"/>
  <updated>2018-07-30T08:50:48.409Z</updated>
  <id>https://dword.top/</id>
  
  <author>
    <name>meimeijun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>注意力训练的方法《思维导图大全集》</title>
    <link href="https://dword.top/%E6%B3%A8%E6%84%8F%E5%8A%9B.html"/>
    <id>https://dword.top/注意力.html</id>
    <published>2018-07-02T16:00:00.000Z</published>
    <updated>2018-07-30T08:50:48.409Z</updated>
    
    <content type="html"><![CDATA[<h4 id="训练1"><a href="#训练1" class="headerlink" title="训练1:"></a>训练1:</h4><p>把收音机的音量逐渐关小到刚能听清楚时认真地听，听3分钟后回忆所听到的内容。</p><h4 id="训练2"><a href="#训练2" class="headerlink" title="训练2:"></a>训练2:</h4><p>在桌上摆三四件小物品，如瓶子、铅笔、书本、水杯等，对每件物品进行追踪思考各两<br>分钟，即在两分钟内思考与某件物品的一系列有关内容，比如思考瓶子时，想到各种各样的瓶子，想到各种瓶子的用途，想到瓶子的制造，造玻璃的矿石来源等。</p><p>这时，控制自己不想别的物品，两分钟后，立即把注意力转移到第二件物品上开始时，较难做到两分钟后的迅速转移，但如果每天练习10多分钟，两周后情况就大有好转了。</p><h4 id="训练3"><a href="#训练3" class="headerlink" title="训练3:"></a>训练3:</h4><p>盯住一张画，然后闭上眼睛，回忆画面内容，尽量做到完整，例如画中的人物、衣着、桌椅及各种摆设。回忆后睁开眼睛再看一下原画，如不完整，再重新回忆一遍。这个训练既可培养注意力集中的能力，也可提高更广范围的想象能力。</p><p>或者，在地图上寻找一个不太熟悉的城镇，在图上找出各个标记数字与其对应的建筑物，也能提高观察时集中注意力的能力。</p><a id="more"></a><h4 id="训练4"><a href="#训练4" class="headerlink" title="训练4:"></a>训练4:</h4><p>准备一张白纸，用7分钟时间，写完1〜300这一系列数字。测验前先练习一下，感到书写流利、很有把握后再开始，注意掌握时间，越接近结束速度会越慢，稍微放慢就会写不完。一般写到199时每个数不到1秒钟，后面的数字书写每个要超过1秒钟，另外换行书写也需花时间。</p><p>测验要求：能看清所写的字，不至于过分潦草，写错了不许改，也不许做标记，接着写下去；到规定时间，如写不完必须停笔。</p><p>结果评定：第一次差错出现在100以前为注意力较差；出现在101~180间为注意力一般；出现在181〜240间是注意力较好的；超过240出差错或完全对是注意力优秀。总的差错在7个以上为较差,错4〜7个为一般,错2〜3个为较好;只错一个为优秀。如果差错在100以前就出现了，但总的差错只有一两次，这种注意力仍是属于较好的。要是到180后才出错，但错得较多，说明这个人易于集中注意力，但很难维持下去。在规定时间内写不完则说明反应速度慢。</p><p>将测验情况记录，留与以后的测验作比较。</p><h4 id="训练5"><a href="#训练5" class="headerlink" title="训练5:"></a>训练5:</h4><p>假设你在读一本书、看一本杂志或一张报纸，你对它并不感兴趣，突然发现自己想到了大约10年前在墨西哥看的一场斗牛，你是怎样想到那里去的呢？看一下那本书你或许会发现你所读的最后一句话写的是遇难船发出了失事信号，集中分析一下思路，你可能会回忆出下面的过程：</p><p>遇难船使你想起了英法大战中的船只，有的人得救了，其他的人沉没了。你想到了死去的4位著名牧师，他们把自己的救生圈留给了水手。有一枚邮票纪念他们，由此你想到了其他的一些复印邮票硬币和5分镍币上的野牛，野牛又使你想到了公牛以及墨西哥的斗牛。这种集中注意力的练习实际上随时随地都可以进行。</p><p>经常在噪音或其他干扰环境中学习的人，要特别注意稳定情绪，不必一遇到不顺心的干扰就大动肝火。情绪不像动作，一旦激发起来便不易平静，结果对注意力的危害比出现的干扰现象更大。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;训练1&quot;&gt;&lt;a href=&quot;#训练1&quot; class=&quot;headerlink&quot; title=&quot;训练1:&quot;&gt;&lt;/a&gt;训练1:&lt;/h4&gt;&lt;p&gt;把收音机的音量逐渐关小到刚能听清楚时认真地听，听3分钟后回忆所听到的内容。&lt;/p&gt;
&lt;h4 id=&quot;训练2&quot;&gt;&lt;a href=&quot;#训练2&quot; class=&quot;headerlink&quot; title=&quot;训练2:&quot;&gt;&lt;/a&gt;训练2:&lt;/h4&gt;&lt;p&gt;在桌上摆三四件小物品，如瓶子、铅笔、书本、水杯等，对每件物品进行追踪思考各两&lt;br&gt;分钟，即在两分钟内思考与某件物品的一系列有关内容，比如思考瓶子时，想到各种各样的瓶子，想到各种瓶子的用途，想到瓶子的制造，造玻璃的矿石来源等。&lt;/p&gt;
&lt;p&gt;这时，控制自己不想别的物品，两分钟后，立即把注意力转移到第二件物品上开始时，较难做到两分钟后的迅速转移，但如果每天练习10多分钟，两周后情况就大有好转了。&lt;/p&gt;
&lt;h4 id=&quot;训练3&quot;&gt;&lt;a href=&quot;#训练3&quot; class=&quot;headerlink&quot; title=&quot;训练3:&quot;&gt;&lt;/a&gt;训练3:&lt;/h4&gt;&lt;p&gt;盯住一张画，然后闭上眼睛，回忆画面内容，尽量做到完整，例如画中的人物、衣着、桌椅及各种摆设。回忆后睁开眼睛再看一下原画，如不完整，再重新回忆一遍。这个训练既可培养注意力集中的能力，也可提高更广范围的想象能力。&lt;/p&gt;
&lt;p&gt;或者，在地图上寻找一个不太熟悉的城镇，在图上找出各个标记数字与其对应的建筑物，也能提高观察时集中注意力的能力。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://dword.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="注意力" scheme="https://dword.top/tags/%E6%B3%A8%E6%84%8F%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>观察力训练的方法《思维导图大全集》</title>
    <link href="https://dword.top/%E8%A7%82%E5%AF%9F%E5%8A%9B.html"/>
    <id>https://dword.top/观察力.html</id>
    <published>2018-06-27T16:00:00.000Z</published>
    <updated>2018-07-30T08:50:44.086Z</updated>
    
    <content type="html"><![CDATA[<h4 id="训练1："><a href="#训练1：" class="headerlink" title="训练1："></a>训练1：</h4><p>选一种静止物，比如一幢楼房、一个池塘或一棵树，对它进行观察。按照观察步骤，对观察物的形、声、色、味进行说明或描述。这种观察可以进行多次，直到自己能抓住主要观察物的特征为止。</p><h4 id="训练2"><a href="#训练2" class="headerlink" title="训练2:"></a>训练2:</h4><p>选一个目标，像电话、收音机、简单机械等，仔细把它看几分钟，然后等上大约一个钟</p><p>头，不看原物画一张图。把你的图与原物进行比较，注意画错了的地方，最后不看原物再画一张图，把画错了的地方更正过来。</p><h4 id="训练3"><a href="#训练3" class="headerlink" title="训练3:"></a>训练3:</h4><p>画一张中国地图，标出你所在的那个省的省界，和所在的省会，标完之后，把你标的与地图进行比较，注意有哪些地方搞错了，不过地图在眼前时不要去修正，把错处及如何修正都记在脑子里，然后丢幵地图再画一张。错误越多就越需要重复做这个练习。</p><p>在你有把握画出整个中国之后就画整个亚洲，然后画南美洲、欧洲以及其他的洲。要画得多详细由你自己决定。<br><a id="more"></a></p><h4 id="训练4"><a href="#训练4" class="headerlink" title="训练4:"></a>训练4:</h4><p>以运动的机器、变化的云或物理、化学实验为观察对象，按照观察步骤进行观察。这种观察特别强调知识的准备，要能说明运动变化着的形、声、色、味的特点及其变化原因。</p><h4 id="训练5"><a href="#训练5" class="headerlink" title="训练5:"></a>训练5:</h4><p>随便在书里或杂志里找一幅图，看它几分钟，尽可能多观察一些细节，然后凭记忆把它画出来^如果有人帮助，你可以不必画图，只要回答你朋友提出的有关图片细节的问题就可以了。问题可能会是这样的：有多少人？他们是什么样子？穿什么衣服？衣服是什么颜色？有多少房子？图片里有钟吗？几点了？等等。</p><h4 id="训练6"><a href="#训练6" class="headerlink" title="训练6:"></a>训练6:</h4><p>把练习扩展到一间房子。开始是你熟悉的房间，然后是你只看过几次的房间，最后是你只看过一次的房间，不过每次都要描述细节。不要满足于知道在西北角有一个书架，还要回忆一下书架有多少层，每层估计有多少书，是哪种书，等等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;训练1：&quot;&gt;&lt;a href=&quot;#训练1：&quot; class=&quot;headerlink&quot; title=&quot;训练1：&quot;&gt;&lt;/a&gt;训练1：&lt;/h4&gt;&lt;p&gt;选一种静止物，比如一幢楼房、一个池塘或一棵树，对它进行观察。按照观察步骤，对观察物的形、声、色、味进行说明或描述。这种观察可以进行多次，直到自己能抓住主要观察物的特征为止。&lt;/p&gt;
&lt;h4 id=&quot;训练2&quot;&gt;&lt;a href=&quot;#训练2&quot; class=&quot;headerlink&quot; title=&quot;训练2:&quot;&gt;&lt;/a&gt;训练2:&lt;/h4&gt;&lt;p&gt;选一个目标，像电话、收音机、简单机械等，仔细把它看几分钟，然后等上大约一个钟&lt;/p&gt;
&lt;p&gt;头，不看原物画一张图。把你的图与原物进行比较，注意画错了的地方，最后不看原物再画一张图，把画错了的地方更正过来。&lt;/p&gt;
&lt;h4 id=&quot;训练3&quot;&gt;&lt;a href=&quot;#训练3&quot; class=&quot;headerlink&quot; title=&quot;训练3:&quot;&gt;&lt;/a&gt;训练3:&lt;/h4&gt;&lt;p&gt;画一张中国地图，标出你所在的那个省的省界，和所在的省会，标完之后，把你标的与地图进行比较，注意有哪些地方搞错了，不过地图在眼前时不要去修正，把错处及如何修正都记在脑子里，然后丢幵地图再画一张。错误越多就越需要重复做这个练习。&lt;/p&gt;
&lt;p&gt;在你有把握画出整个中国之后就画整个亚洲，然后画南美洲、欧洲以及其他的洲。要画得多详细由你自己决定。&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://dword.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="观察力" scheme="https://dword.top/tags/%E8%A7%82%E5%AF%9F%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>解压文件(选自python绝技)</title>
    <link href="https://dword.top/%E8%A7%A3%E5%8E%8B%E6%96%87%E4%BB%B6-%E9%80%89%E8%87%AApython%E7%BB%9D%E6%8A%80.html"/>
    <id>https://dword.top/解压文件-选自python绝技.html</id>
    <published>2018-06-14T16:00:00.000Z</published>
    <updated>2018-06-25T17:24:49.360Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;破解zip文件需要用到python中的zipfile库，实例化ZipFile类，ZipFile类是用来创建和读取zip文件的，调用其extractall()方法。<br><br><strong><em>extractall([path[,member[,path[,pwd]]])</em></strong>  </p><ul><li>path:解压缩的目录  </li><li>member:需要解压缩的文件列表  </li><li>pwd:当zip文件有密码是需要该选项  </li></ul><p>看下面实例:<br></p><p>>&gt;&gt; import zipfile<br>>&gt;&gt; zipfile = zipfile.ZipFile(r’D:\pycharm_obj\abc.zip’)<br>>&gt;&gt; zipfile.extractall(‘1234’)  </p><p>运行以后显示密码不正确，查看以后发现是一个字符一个字符读取，但我看资料大多都这样写不知道怎么回事，应该是版本有点变化了，我的版本是3.6。</p><p>最后附上一个简单的小破解程序，对原书的做了一些小修改。<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一个破解的方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extgractfile</span><span class="params">(zfile, password)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        zfile.extractall(pwd=password.encode())</span><br><span class="line">        print(password+<span class="string">"++++++++++++++++++++++++++++++"</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> password</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(k)</span>:</span></span><br><span class="line">    zfile = zipfile.ZipFile(<span class="string">r'abc.zip'</span>)</span><br><span class="line">    passfile = open(<span class="string">r'dictionary.txt'</span>)</span><br><span class="line">    </span><br><span class="line">    list = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> passfile.readline():</span><br><span class="line">        pas = line.strip(<span class="string">'\n'</span>)</span><br><span class="line">        list.append(pas)</span><br><span class="line">    <span class="comment">#没办法一个一个读取，只能自己拼接密码了</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list)):</span><br><span class="line">        <span class="comment">#拼接到最后一个字符就退出</span></span><br><span class="line">        <span class="keyword">if</span> (i + k &gt; len(list)):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        pasword =<span class="string">""</span>.join(list[i:i+k])</span><br><span class="line">        print(pasword,len(pasword))</span><br><span class="line">        t = Thread(target=extgractfile,args=(zfile, pasword))</span><br><span class="line">        t.start()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main(<span class="number">4</span>)</span><br><span class="line">    <span class="comment">#可以解压传统压缩模式，默认模式不行\</span></span><br><span class="line">    <span class="comment">#加入了一个几位数密码的判读，这个不成熟，应该是某个范围的判断才更好一点</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;破解zip文件需要用到python中的zipfile库，实例化ZipFile类，ZipFile类是用来创建和读取zip文件的，调用其extractall()方法。&lt;br&gt;&lt;br&gt;&lt;strong&gt;&lt;em&gt;extractall([path[,member[,path[,pwd]]])&lt;/em&gt;&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;path:解压缩的目录  &lt;/li&gt;
&lt;li&gt;member:需要解压缩的文件列表  &lt;/li&gt;
&lt;li&gt;pwd:当zip文件有密码是需要该选项  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;看下面实例:&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&gt;&amp;gt;&amp;gt; import zipfile&lt;br&gt;&gt;&amp;gt;&amp;gt; zipfile = zipfile.ZipFile(r’D:\pycharm_obj\abc.zip’)&lt;br&gt;&gt;&amp;gt;&amp;gt; zipfile.extractall(‘1234’)  &lt;/p&gt;
&lt;p&gt;运行以后显示密码不正确，查看以后发现是一个字符一个字符读取，但我看资料大多都这样写不知道怎么回事，应该是版本有点变化了，我的版本是3.6。&lt;/p&gt;
&lt;p&gt;最后附上一个简单的小破解程序，对原书的做了一些小修改。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://dword.top/categories/python/"/>
    
    
      <category term="python" scheme="https://dword.top/tags/python/"/>
    
      <category term="zipfile" scheme="https://dword.top/tags/zipfile/"/>
    
  </entry>
  
  <entry>
    <title>英语连读</title>
    <link href="https://dword.top/%E8%BF%9E%E8%AF%BB.html"/>
    <id>https://dword.top/连读.html</id>
    <published>2018-05-12T16:00:00.000Z</published>
    <updated>2018-06-25T17:25:13.127Z</updated>
    
    <content type="html"><![CDATA[<h2 id="英语句子连读的一些发音《赖世雄-英语音标》"><a href="#英语句子连读的一些发音《赖世雄-英语音标》" class="headerlink" title="英语句子连读的一些发音《赖世雄-英语音标》"></a>英语句子连读的一些发音《赖世雄-英语音标》</h2><p>在我们熟悉音标的前提下，在听英美人整句对话的时候，还是听不懂，这里介绍一些句子连读的念法，看下面最好有音标的基础。</p><h3 id="字尾辅音-字首元音"><a href="#字尾辅音-字首元音" class="headerlink" title="字尾辅音+字首元音"></a>字尾辅音+字首元音</h3><p>短语：  </p><h4 id="p-元音"><a href="#p-元音" class="headerlink" title="[p] + 元音"></a>[p] + 元音</h4><p><font color="green" size="3">up and down</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <font color="orange" size="3">[ʌpənd ˈdaun]</font><br>上上下下  </p><p><font color="green" size="3">keep it up</font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[kipɪ ˈtʌp]</font><br>坚持下去  </p><p><font color="green" size="3">stop it</font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[ˈstɑpɪt]</font><br>住手  </p><h4 id="t-元音"><a href="#t-元音" class="headerlink" title="[t] + 元音"></a>[t] + 元音</h4><p><font color="green" size="3">put it on</font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[pʊtɪ ˈɑn]</font><br>把它穿上  </p><p><font color="green" size="3">not at all</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[nɑtæ ˈtɔl]</font><br>一点也不  </p><p><font color="green" size="3">put it off</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[pʊtɪ ˈtɔf] </font><br>把它延期<br><a id="more"></a></p><h4 id="d-元音"><a href="#d-元音" class="headerlink" title="[d] + 元音"></a>[d] + 元音</h4><p><font color="green" size="3">stand up</font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[stæn ˈdʌp]</font><br>站起来  </p><p><font color="green" size="3">good idea</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[ɡʊdaɪ ˈdiə] </font><br>好主意  </p><p><font color="green" size="3">Dad and Mom</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[dædənd ˈmɑm] </font><br>老爸和老妈</p><h4 id="k-元音"><a href="#k-元音" class="headerlink" title="[k] + 元音"></a>[k] + 元音</h4><p><font color="green" size="3">take off</font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[te ˈkɔf]</font><br>起飞  </p><p><font color="green" size="3">pick it up</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[pɪkɪ ˈtʌp]</font><br>把它拾起来  </p><p><font color="green" size="3">knock him out</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[nɑkə ˈmaʊt]</font><br>把他击晕  </p><h4 id="n-元音"><a href="#n-元音" class="headerlink" title="[n] + 元音"></a>[n] + 元音</h4><p><font color="green" size="3">in an hour</font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[Inə ˈnaʊr]</font><br>一个小时后  </p><p><font color="green" size="3">pen and paper</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[pɛnənd ˈpepər] </font><br>纸和笔  </p><p><font color="green" size="3">clean and tidy</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[klinənd ˈtaɪdi] </font><br>干净又整洁  </p><h4 id="r-元音"><a href="#r-元音" class="headerlink" title="[r] + 元音"></a>[r] + 元音</h4><p><font color="green" size="3">far away</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[fɑrə ˈwe]</font><br>遥远的  </p><p><font color="green" size="3">pair of shoes</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[pɛrəv ‘ʃuz] </font><br>一双鞋  </p><p><font color="green" size="3">for instance</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[fɔ ‘rɪnstəns]  </font><br>举例说明  </p><ul><li><font color="green" size="3">up and down , Dad and Mon , pen and paper 及 clean and tidy 中的and 本来要发 [ænd]的音，但在弱音节时，则发[ənd]的音。  </font><br></li><li><p><font color="green" size="3">knock him out 中 him 原本要发[hIm]的音，但在弱音节时则发[əm]的音，原有的[h]不需要念出来。  </font><br></p></li><li><p><font color="green" size="3">in an hour 中的an 本来要发[æn]的音，但在弱音节时则发[ən]的音  </font><br></p></li></ul><h3 id="字尾辅音-字首相同的辅音"><a href="#字尾辅音-字首相同的辅音" class="headerlink" title="字尾辅音 + 字首相同的辅音"></a>字尾辅音 + 字首相同的辅音</h3><p><font color="green" size="2">&lt;通常前者的辅音可省略憋气有意就可以了，只念后者的辅音。这种情况常发生在[p],[t],[k],[d],[g].&gt;</font><br></p><h4 id="p-p"><a href="#p-p" class="headerlink" title="[p] + [p]"></a>[p] + [p]</h4><p><font color="green" size="3">deep pond</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <font color="orange" size="3">[di* ‘pɑnd] </font><br>深池塘    </p><p><font color="green" size="3">stop playing</font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[stɑ* ‘pleɪŋ] </font><br>停止游戏  </p><p><font color="green" size="3">keep pace</font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[ki* ‘pes] </font><br>保持步速   </p><h4 id="t-t"><a href="#t-t" class="headerlink" title="[t] + [t]"></a>[t] + [t]</h4><p><font color="green" size="3">hot tea</font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[hɑ* ‘ti] </font><br>热茶  </p><p><font color="green" size="3">part-time</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <font color="orange" size="3">[pɑr* ‘taɪm]</font><br>兼职的  </p><p><font color="green" size="3">at two</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[æ* ‘tu]</font><br>在两点时  </p><h4 id="k-k"><a href="#k-k" class="headerlink" title="[k] + [k]"></a>[k] + [k]</h4><p><font color="green" size="3">take care</font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <font color="orange" size="3">[te* ‘kɛr]</font><br>小心  </p><p><font color="green" size="3">black coffee</font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[blæ* ‘kafi] </font><br>不加奶精及糖的咖啡  </p><p><font color="green" size="3">book case</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[bʊ* kes]</font><br>书柜  </p><h4 id="d-d"><a href="#d-d" class="headerlink" title="[d] + [d]"></a>[d] + [d]</h4><p><font color="green" size="3">good day</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[gʊ* ‘de]</font><br>好日子  </p><p><font color="green" size="3">cold day</font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[kol* ‘de]</font><br>寒天  </p><p><font color="green" size="3">red dress</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <font color="orange" size="3"> [rɛ* ‘drɛs]</font><br>红色的洋装  </p><h4 id="g-g"><a href="#g-g" class="headerlink" title="[g] + [g]"></a>[g] + [g]</h4><p><font color="green" size="3">big game</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <font color="orange" size="3">[bɪ* ‘gem]</font><br>大比赛   </p><p><font color="green" size="3">big graden</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  <font color="orange" size="3">[bɪ* ‘gɑrdn]</font><br>大花园  </p><p><font color="green" size="3">big gate</font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3"> [bɪ* ‘get] </font><br>大门  </p><h4 id="c-t"><a href="#c-t" class="headerlink" title="[c] +[t]"></a>[c] +[t]</h4><p><font color="green" size="3">red table</font>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[rɛ* ‘tebl] </font><br>红色的子  </p><p><font color="green" size="3">round table</font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[raʊn* ‘tebl]</font><br>圆桌  </p><p><font color="green" size="3">good teacher</font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3"> [gʊ* ‘titʃɚ] </font><br>好老师</p><h4 id="k-g"><a href="#k-g" class="headerlink" title="[k] + [g]"></a>[k] + [g]</h4><p><font color="green" size="3">black gate</font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3"> [blæ* ‘get] </font><br>黑色的门</p><h4 id="p-b"><a href="#p-b" class="headerlink" title="[p] + [b]"></a>[p] + [b]</h4><p><font color="green" size="3">cheap book</font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="orange" size="3">[tʃi* ‘bʊk] </font><br>便宜的书  </p><h4 id="字尾-t-或字尾有-d"><a href="#字尾-t-或字尾有-d" class="headerlink" title="字尾[t] 或字尾有[d]"></a>字尾[t] 或字尾有[d]</h4><p><font color="green" size="2">&lt;通常不会读出来，而是快要念出来的时候，憋气顿息，常常听不到.&gt;</font><br></p><p><font color="green" size="3">Let me try it.</font><br>让我试试看  </p><p><font color="green" size="3">Don’t worry about it.</font><br>不要担心这个  </p><p><font color="green" size="3">Don’t get me wrong.</font><br>不要误解我  </p><p><font color="green" size="3">You don’t mean it.</font><br>你不是当真的  </p><p><font color="green" size="3">Just great. </font><br>太好了  </p><p><font color="green" size="3">It might be true. </font><br>那也许时真的  </p><p><font color="green" size="3">Good news.</font><br>好消息  </p><p><font color="green" size="3">Could be. </font><br>也许吧  </p><p><font color="green" size="3">I’m tired.</font><br>我累了  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;英语句子连读的一些发音《赖世雄-英语音标》&quot;&gt;&lt;a href=&quot;#英语句子连读的一些发音《赖世雄-英语音标》&quot; class=&quot;headerlink&quot; title=&quot;英语句子连读的一些发音《赖世雄-英语音标》&quot;&gt;&lt;/a&gt;英语句子连读的一些发音《赖世雄-英语音标》&lt;/h2&gt;&lt;p&gt;在我们熟悉音标的前提下，在听英美人整句对话的时候，还是听不懂，这里介绍一些句子连读的念法，看下面最好有音标的基础。&lt;/p&gt;
&lt;h3 id=&quot;字尾辅音-字首元音&quot;&gt;&lt;a href=&quot;#字尾辅音-字首元音&quot; class=&quot;headerlink&quot; title=&quot;字尾辅音+字首元音&quot;&gt;&lt;/a&gt;字尾辅音+字首元音&lt;/h3&gt;&lt;p&gt;短语：  &lt;/p&gt;
&lt;h4 id=&quot;p-元音&quot;&gt;&lt;a href=&quot;#p-元音&quot; class=&quot;headerlink&quot; title=&quot;[p] + 元音&quot;&gt;&lt;/a&gt;[p] + 元音&lt;/h4&gt;&lt;p&gt;&lt;font color=&quot;green&quot; size=&quot;3&quot;&gt;up and down&lt;/font&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;  &lt;font color=&quot;orange&quot; size=&quot;3&quot;&gt;[ʌpənd ˈdaun]&lt;/font&gt;&lt;br&gt;上上下下  &lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;green&quot; size=&quot;3&quot;&gt;keep it up&lt;/font&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;font color=&quot;orange&quot; size=&quot;3&quot;&gt;[kipɪ ˈtʌp]&lt;/font&gt;&lt;br&gt;坚持下去  &lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;green&quot; size=&quot;3&quot;&gt;stop it&lt;/font&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;font color=&quot;orange&quot; size=&quot;3&quot;&gt;[ˈstɑpɪt]&lt;/font&gt;&lt;br&gt;住手  &lt;/p&gt;
&lt;h4 id=&quot;t-元音&quot;&gt;&lt;a href=&quot;#t-元音&quot; class=&quot;headerlink&quot; title=&quot;[t] + 元音&quot;&gt;&lt;/a&gt;[t] + 元音&lt;/h4&gt;&lt;p&gt;&lt;font color=&quot;green&quot; size=&quot;3&quot;&gt;put it on&lt;/font&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;font color=&quot;orange&quot; size=&quot;3&quot;&gt;[pʊtɪ ˈɑn]&lt;/font&gt;&lt;br&gt;把它穿上  &lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;green&quot; size=&quot;3&quot;&gt;not at all&lt;/font&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;font color=&quot;orange&quot; size=&quot;3&quot;&gt;[nɑtæ ˈtɔl]&lt;/font&gt;&lt;br&gt;一点也不  &lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;green&quot; size=&quot;3&quot;&gt;put it off&lt;/font&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;font color=&quot;orange&quot; size=&quot;3&quot;&gt;[pʊtɪ ˈtɔf] &lt;/font&gt;&lt;br&gt;把它延期&lt;br&gt;
    
    </summary>
    
      <category term="英语" scheme="https://dword.top/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
      <category term="英语" scheme="https://dword.top/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>排序</title>
    <link href="https://dword.top/%E6%8E%92%E5%BA%8F.html"/>
    <id>https://dword.top/排序.html</id>
    <published>2018-03-25T16:00:00.000Z</published>
    <updated>2018-08-02T05:28:46.553Z</updated>
    
    <content type="html"><![CDATA[<h4 id="c-数组的逆序以及汉字的输出操作"><a href="#c-数组的逆序以及汉字的输出操作" class="headerlink" title="c++数组的逆序以及汉字的输出操作"></a>c++数组的逆序以及汉字的输出操作</h4><h5 id="首先是数组的逆序操作"><a href="#首先是数组的逆序操作" class="headerlink" title="首先是数组的逆序操作."></a>首先是数组的逆序操作.</h5><ul><li>获取数组的首地址跟末地址</li><li>利用中间值依次交换</li><li>最后输出逆序以后的数组  </li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nixu</span><span class="params">(<span class="keyword">int</span> str[],<span class="keyword">int</span> len)</span><span class="comment">//数组的逆序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *ip = &amp;str[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> *ip1 = &amp;str[len<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span> (ip&lt;ip1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp = *ip;</span><br><span class="line">*ip = *ip1;</span><br><span class="line">*ip1 = temp;</span><br><span class="line"></span><br><span class="line">ip++;</span><br><span class="line">ip1--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, str[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="求一个数组中第二大的数。"><a href="#求一个数组中第二大的数。" class="headerlink" title="求一个数组中第二大的数。"></a>求一个数组中第二大的数。</h5><ul><li>首先定义两个指针指向首地址跟下一个地址</li><li>假设max是最大值，s_max是第二大值</li><li>第一个判断得到的是否是最大值。  </li><li>第二个判断第二大值是否仅次于最大值</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mbxs</span><span class="params">(<span class="keyword">int</span> *str，<span class="keyword">int</span> lens)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//定义两个指针</span></span><br><span class="line"><span class="keyword">int</span>* max = str;</span><br><span class="line"><span class="keyword">int</span> *s_max = ++str;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lens - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*max &lt; *(str + i))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ip = *s_max;</span><br><span class="line">*s_max = *max;</span><br><span class="line">*max = *(str + i);</span><br><span class="line">*(str + i) = ip;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (*max &gt; *(str + i) &amp;&amp; *s_max &lt; *(str + i))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ipp=*s_max;</span><br><span class="line">*s_max = *(str + i);</span><br><span class="line">*(str+i)=ipp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *s_max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="对汉字进行输出"><a href="#对汉字进行输出" class="headerlink" title="对汉字进行输出"></a>对汉字进行输出</h5><p>因为一个汉字占两个字节或者更多的字节数，所以输出一个字一定是几个字节拼凑得出一个字。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">china_string</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> *ip = str;</span><br><span class="line"><span class="keyword">while</span> (*ip)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c%c\n"</span>,*ip,*(ip+<span class="number">1</span>) );</span><br><span class="line">ip +=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="对汉字字符串进行逆序操作"><a href="#对汉字字符串进行逆序操作" class="headerlink" title="对汉字字符串进行逆序操作"></a>对汉字字符串进行逆序操作</h5><p>整体思路跟前面的不变，只是指针移动的字节数是一个汉字占用的字节数。  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">china_string_server</span><span class="params">(<span class="keyword">char</span> str[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">short</span> *ip = &amp;str[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">short</span> *ip1 = &amp;str[<span class="built_in">strlen</span>(str)<span class="number">-2</span>];</span><br><span class="line"><span class="keyword">while</span> (ip&lt;ip1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">short</span> temp = *ip;</span><br><span class="line">*ip = *ip1;</span><br><span class="line">*ip1 = temp;</span><br><span class="line"></span><br><span class="line">ip++;</span><br><span class="line">ip1--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="求数组中最大值。"><a href="#求数组中最大值。" class="headerlink" title="求数组中最大值。"></a>求数组中最大值。</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxs</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> lens)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> max = *a;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lens; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (max &lt; *(a+i))</span><br><span class="line">max = *(a+i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好多东西零零散散的都快忘干净了，写的不是很好，有好想法的小伙伴多提意见。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;c-数组的逆序以及汉字的输出操作&quot;&gt;&lt;a href=&quot;#c-数组的逆序以及汉字的输出操作&quot; class=&quot;headerlink&quot; title=&quot;c++数组的逆序以及汉字的输出操作&quot;&gt;&lt;/a&gt;c++数组的逆序以及汉字的输出操作&lt;/h4&gt;&lt;h5 id=&quot;首先是数组的逆序操作&quot;&gt;&lt;a href=&quot;#首先是数组的逆序操作&quot; class=&quot;headerlink&quot; title=&quot;首先是数组的逆序操作.&quot;&gt;&lt;/a&gt;首先是数组的逆序操作.&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;获取数组的首地址跟末地址&lt;/li&gt;
&lt;li&gt;利用中间值依次交换&lt;/li&gt;
&lt;li&gt;最后输出逆序以后的数组  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;nixu&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; str[],&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len)&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//数组的逆序&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *ip = &amp;amp;str[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *ip1 = &amp;amp;str[len&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (ip&amp;lt;ip1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; temp = *ip;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		*ip = *ip1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		*ip1 = temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ip++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ip1--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;, str[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="c++" scheme="https://dword.top/categories/c/"/>
    
    
      <category term="排序" scheme="https://dword.top/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>栈结构实现</title>
    <link href="https://dword.top/%E6%A0%88%E7%BB%93%E6%9E%84.html"/>
    <id>https://dword.top/栈结构.html</id>
    <published>2018-03-05T16:00:00.000Z</published>
    <updated>2018-08-02T05:29:50.430Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span>      //定义栈模型</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">PNODE TOP;</span><br><span class="line">PNODE BUTTOM;</span><br><span class="line">&#125;*PSTACK,STACK;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">栈定义的模型</span></span><br><span class="line"><span class="comment">初始化方法，压入栈的方法，出栈的方法，遍历的方法，</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//初始化栈的操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_stack</span><span class="params">(PSTACK)</span></span>;</span><br><span class="line"><span class="comment">//压入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_stack</span><span class="params">(PSTACK, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_stack</span><span class="params">(PSTACK, <span class="keyword">int</span>*)</span></span>;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(PSTACK)</span></span>;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">(PSTACK)</span></span>;</span><br><span class="line"><span class="comment">//clear;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(PSTACK)</span></span>;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">实现上述栈的函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_stack</span><span class="params">(PSTACK phead)</span></span>&#123;</span><br><span class="line">PNODE <span class="built_in">stack</span> = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">stack</span> == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"创建失败！"</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">phead-&gt;BUTTOM = <span class="built_in">stack</span>;</span><br><span class="line">phead-&gt;TOP = phead-&gt;BUTTOM;</span><br><span class="line">phead-&gt;TOP-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_stack</span><span class="params">(PSTACK phead, <span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">PNODE pnew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">pnew-&gt;data = val;</span><br><span class="line">pnew-&gt;next = phead-&gt;TOP;</span><br><span class="line">phead-&gt;TOP = pnew;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop_stack</span><span class="params">(PSTACK phead, <span class="keyword">int</span> *val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (empty(phead))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">PNODE p = phead-&gt;TOP;</span><br><span class="line">*val = p-&gt;data;</span><br><span class="line">phead-&gt;TOP = p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(PSTACK phead)</span></span>&#123;</span><br><span class="line">PNODE p = phead-&gt;TOP;</span><br><span class="line"><span class="keyword">while</span> (phead-&gt;BUTTOM!=p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">(PSTACK phead)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (phead-&gt;BUTTOM == phead-&gt;TOP)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//clear</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(PSTACK phead)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (empty(phead))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">PNODE p = phead-&gt;TOP;</span><br><span class="line"><span class="keyword">while</span> (p != phead-&gt;BUTTOM)</span><br><span class="line">&#123;</span><br><span class="line">phead-&gt;TOP = p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">p = phead-&gt;TOP;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">STACK <span class="built_in">stack</span>;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">init_stack(&amp;<span class="built_in">stack</span>);   <span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">if</span> (empty(&amp;<span class="built_in">stack</span>))  <span class="comment">//</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"空stack\n"</span>);</span><br><span class="line">push_stack(&amp;<span class="built_in">stack</span>, <span class="number">1</span>);<span class="comment">//push</span></span><br><span class="line">push_stack(&amp;<span class="built_in">stack</span>, <span class="number">2</span>);</span><br><span class="line">push_stack(&amp;<span class="built_in">stack</span>, <span class="number">3</span>);</span><br><span class="line">traverse(&amp;<span class="built_in">stack</span>);   <span class="comment">//遍历</span></span><br><span class="line">pop_stack(&amp;<span class="built_in">stack</span>, &amp;val);</span><br><span class="line">clear(&amp;<span class="built_in">stack</span>);  <span class="comment">//clear</span></span><br><span class="line">pop_stack(&amp;<span class="built_in">stack</span>, &amp;val);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, val);</span><br><span class="line">pop_stack(&amp;<span class="built_in">stack</span>, &amp;val);</span><br><span class="line">pop_stack(&amp;<span class="built_in">stack</span>,&amp;val);   <span class="comment">//pop</span></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt;  _CRT_SECURE_NO_WARNINGS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Stack&lt;/span&gt;      //定义栈模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	PNODE TOP;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	PNODE BUTTOM;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;*PSTACK,STACK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;栈定义的模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;初始化方法，压入栈的方法，出栈的方法，遍历的方法，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//初始化栈的操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init_stack&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PSTACK)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//压入栈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;push_stack&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PSTACK, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//出栈&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;pop_stack&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PSTACK, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;traverse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PSTACK)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//是否为空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PSTACK)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//clear;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PSTACK)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="c++" scheme="https://dword.top/categories/c/"/>
    
    
      <category term="数据类型" scheme="https://dword.top/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>队列结构实现</title>
    <link href="https://dword.top/%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0.html"/>
    <id>https://dword.top/队列实现.html</id>
    <published>2018-03-05T16:00:00.000Z</published>
    <updated>2018-08-02T05:30:34.193Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> * pBase;</span><br><span class="line"><span class="keyword">int</span> front;</span><br><span class="line"><span class="keyword">int</span> rear;</span><br><span class="line">&#125;QUEUE;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">队列的实现</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_queue</span><span class="params">(QUEUE *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_queue</span><span class="params">(QUEUE *phead)</span></span>&#123;</span><br><span class="line">phead-&gt;pBase = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">6</span>);</span><br><span class="line">phead-&gt;front = <span class="number">0</span>;</span><br><span class="line">phead-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">en_queue</span><span class="params">(QUEUE *,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">full_queue</span><span class="params">(QUEUE *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_timy</span><span class="params">(QUEUE *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">de_queue</span><span class="params">(QUEUE *, <span class="keyword">int</span>*)</span></span>;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">en_queue</span><span class="params">(QUEUE *phead,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (full_queue(phead))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">phead-&gt;pBase[phead-&gt;rear] = val;</span><br><span class="line">phead-&gt;rear = (phead-&gt;rear + <span class="number">1</span>) % <span class="number">6</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">de_queue</span><span class="params">(QUEUE *phead, <span class="keyword">int</span> *val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (is_timy(phead))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">*val = phead-&gt;pBase[phead-&gt;front];</span><br><span class="line">phead-&gt;front = (phead-&gt;front + <span class="number">1</span>) % <span class="number">6</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_timy</span><span class="params">(QUEUE *phead)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (phead-&gt;front == phead-&gt;rear)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否饱和</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">full_queue</span><span class="params">(QUEUE * phead)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (phead-&gt;front==(phead-&gt;rear+<span class="number">1</span>)%<span class="number">6</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">taverse_queue</span><span class="params">(QUEUE *)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">taverse_queue</span><span class="params">(QUEUE * phead)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> f = phead-&gt;front;</span><br><span class="line"><span class="keyword">int</span> r = phead-&gt;rear;</span><br><span class="line"><span class="keyword">if</span> (is_timy(phead))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">while</span> (f!=r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, phead-&gt;pBase[f]);</span><br><span class="line">f = (f + <span class="number">1</span>) % <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">QUEUE <span class="built_in">queue</span>;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">init_queue(&amp;<span class="built_in">queue</span>);  <span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">if</span> (is_timy(&amp;<span class="built_in">queue</span>))     <span class="comment">//是否为空</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"空队列"</span>);</span><br><span class="line">en_queue(&amp;<span class="built_in">queue</span>, <span class="number">1</span>);     <span class="comment">//入队</span></span><br><span class="line">en_queue(&amp;<span class="built_in">queue</span>, <span class="number">2</span>);</span><br><span class="line">en_queue(&amp;<span class="built_in">queue</span>, <span class="number">3</span>);</span><br><span class="line">en_queue(&amp;<span class="built_in">queue</span>, <span class="number">4</span>);</span><br><span class="line">en_queue(&amp;<span class="built_in">queue</span>, <span class="number">5</span>);</span><br><span class="line">taverse_queue(&amp;<span class="built_in">queue</span>);   <span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">if</span> (full_queue(&amp;<span class="built_in">queue</span>))      <span class="comment">//是否饱和</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"饱和"</span>);</span><br><span class="line">en_queue(&amp;<span class="built_in">queue</span>, <span class="number">6</span>);</span><br><span class="line"><span class="keyword">if</span> (full_queue(&amp;<span class="built_in">queue</span>))     <span class="comment">//是否饱和</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"饱和"</span>);</span><br><span class="line">de_queue(&amp;<span class="built_in">queue</span>, &amp;val);</span><br><span class="line">de_queue(&amp;<span class="built_in">queue</span>, &amp;val);</span><br><span class="line">de_queue(&amp;<span class="built_in">queue</span>, &amp;val);</span><br><span class="line">de_queue(&amp;<span class="built_in">queue</span>, &amp;val);</span><br><span class="line">de_queue(&amp;<span class="built_in">queue</span>, &amp;val);</span><br><span class="line">de_queue(&amp;<span class="built_in">queue</span>, &amp;val);</span><br><span class="line">taverse_queue(&amp;<span class="built_in">queue</span>);    </span><br><span class="line">de_queue(&amp;<span class="built_in">queue</span>, &amp;val);  <span class="comment">//出队</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, val);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt;  _CRT_SECURE_NO_WARNINGS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Queue&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; * pBase;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; front;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rear;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;QUEUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;队列的实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init_queue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(QUEUE *)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;init_queue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(QUEUE *phead)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	phead-&amp;gt;pBase = (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;*)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) * &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	phead-&amp;gt;front = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	phead-&amp;gt;rear = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//入队&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;en_queue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(QUEUE *,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;full_queue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(QUEUE *)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;is_timy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(QUEUE *)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;de_queue&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(QUEUE *, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="c++" scheme="https://dword.top/categories/c/"/>
    
    
      <category term="数据类型" scheme="https://dword.top/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>链表结构实现</title>
    <link href="https://dword.top/%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84.html"/>
    <id>https://dword.top/链表结构.html</id>
    <published>2018-03-05T16:00:00.000Z</published>
    <updated>2018-08-02T05:30:56.879Z</updated>
    
    <content type="html"><![CDATA[<p>最近清理磁盘，发现以前自己的一些学习痕迹，当时留下的汇编代码现在看反而自己有点懵，所以，学习的一些心得是，不是你到底学了多少，一定是记住了多少，想想以前花了大量时间研究学习的都忘记，心里很不是滋味。为了不让它消失，也算对自己学习的一些回报就把它收录了进来，供大家参考。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inversion</span><span class="params">(<span class="keyword">int</span> *p)</span></span>;<span class="comment">//逆序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sersion</span><span class="params">(<span class="keyword">int</span> *p,<span class="keyword">int</span> len)</span></span>;<span class="comment">//冒泡排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span><span class="class"><span class="keyword">struct</span> <span class="title">List</span> //<span class="title">list</span>模型</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">List</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;*PNODE,NODE;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建列表</span></span><br><span class="line"><span class="function">PNODE <span class="title">create_list</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_list</span><span class="params">(PNODE phead)</span></span>;</span><br><span class="line"><span class="comment">//判断是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">(PNODE phead)</span></span>;</span><br><span class="line"><span class="comment">//长度or是否饱和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length_list</span><span class="params">(PNODE)</span></span>;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert_list</span><span class="params">(PNODE, <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">delete_list</span><span class="params">(PNODE, <span class="keyword">int</span>, <span class="keyword">int</span>*)</span></span>;</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_list</span><span class="params">(PNODE)</span></span>;</span><br></pre></td></tr></table></figure></p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建list</span></span><br><span class="line"><span class="function">PNODE <span class="title">create_list</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len, i;</span><br><span class="line">PNODE current;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入个数"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;len);</span><br><span class="line">PNODE phead = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line"><span class="keyword">if</span> (phead == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"分配失败！"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">phead-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">current = phead;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line">PNODE pnew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line"><span class="keyword">if</span> (pnew == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"分配失败！"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pnew-&gt;data = i;</span><br><span class="line">current-&gt;next = pnew;</span><br><span class="line">pnew-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">current = pnew;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> phead;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse_list</span><span class="params">(PNODE phead)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PNODE p = phead-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p-&gt;data);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_empty</span><span class="params">(PNODE phead)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (phead-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//长度or是否饱和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length_list</span><span class="params">(PNODE phead)</span></span>&#123;</span><br><span class="line">PNODE p = phead-&gt;next;</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">len++;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insert_list</span><span class="params">(PNODE phead, <span class="keyword">int</span> pox, <span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">PNODE p;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; phead != <span class="literal">NULL</span> &amp;&amp; i &lt; pox - <span class="number">1</span>; phead = phead-&gt;next, i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">while (phead != NULL&amp;&amp; i &lt; pox - 1)&#123;</span></span><br><span class="line"><span class="comment">++i;</span></span><br><span class="line"><span class="comment">phead = phead-&gt;next;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">if</span> (phead==<span class="literal">NULL</span>||i&gt;pox)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">PNODE pnew = (PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line"><span class="keyword">if</span> (pnew == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"分配失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    p=phead-&gt;next;</span><br><span class="line">phead-&gt;next = pnew;</span><br><span class="line">pnew-&gt;data = val;</span><br><span class="line">pnew-&gt;next = p;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">delete_list</span><span class="params">(PNODE phead, <span class="keyword">int</span> pos, <span class="keyword">int</span> *val)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">PNODE p = phead;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">NULL</span> != p-&gt;next &amp;&amp; i &lt; pos - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">++i;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i&gt;pos - <span class="number">1</span> || <span class="literal">NULL</span> == p-&gt;next)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">PNODE q = p-&gt;next;</span><br><span class="line">*val = q-&gt;data;</span><br><span class="line"><span class="comment">//删除p节点后main的节点</span></span><br><span class="line">p-&gt;next = p-&gt;next-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br><span class="line">q = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort_list</span><span class="params">(PNODE phead)</span></span>&#123;</span><br><span class="line">PNODE p = phead-&gt;next;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">PNODE current = p-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (current!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data &lt; current-&gt;data)</span><br><span class="line">&#123;</span><br><span class="line">tmp=p-&gt;data;</span><br><span class="line">p-&gt;data = current-&gt;data;</span><br><span class="line">current-&gt;data = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("%d   %d\n", p-&gt;data, current-&gt;data);</span></span><br><span class="line">current = current-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冒泡</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sersion</span><span class="params">(<span class="keyword">int</span> *p,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> max ;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; len; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p[i ] &lt; p[j])</span><br><span class="line">&#123;</span><br><span class="line">max = p[i ];</span><br><span class="line">p[i ] = p[j];</span><br><span class="line">p[j] = max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//printf("%d\n,%d\n",p[i-1], p[j]);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">PNODE head = create_list();     <span class="comment">//创建</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//if (!is_empty(head))   //是否为空</span></span><br><span class="line"><span class="comment">//printf("列表为空");</span></span><br><span class="line"><span class="comment">//printf("长度为%d", length_list(head));  //长度</span></span><br><span class="line"><span class="comment">//sort_list(head);     //排序</span></span><br><span class="line"><span class="keyword">if</span> (insert_list(head,<span class="number">6</span>,<span class="number">22</span>))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"插入成功\n"</span>);</span><br><span class="line">traverse_list(head);   <span class="comment">//遍历</span></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近清理磁盘，发现以前自己的一些学习痕迹，当时留下的汇编代码现在看反而自己有点懵，所以，学习的一些心得是，不是你到底学了多少，一定是记住了多少，想想以前花了大量时间研究学习的都忘记，心里很不是滋味。为了不让它消失，也算对自己学习的一些回报就把它收录了进来，供大家参考。&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt;  _CRT_SECURE_NO_WARNINGS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inversion&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//逆序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sersion&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//冒泡排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt;	&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;List&lt;/span&gt; //&lt;span class=&quot;title&quot;&gt;list&lt;/span&gt;模型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;List&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;next&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;*PNODE,NODE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;PNODE &lt;span class=&quot;title&quot;&gt;create_list&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//遍历&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;traverse_list&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PNODE phead)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//判断是否为空&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;is_empty&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PNODE phead)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//长度or是否饱和&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;length_list&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PNODE)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//插入&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;insert_list&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PNODE, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//删除&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;delete_list&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PNODE, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;*)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sort_list&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PNODE)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="c++" scheme="https://dword.top/categories/c/"/>
    
    
      <category term="数据类型" scheme="https://dword.top/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>函数笔记</title>
    <link href="https://dword.top/%E5%87%BD%E6%95%B0%E7%AC%94%E8%AE%B0.html"/>
    <id>https://dword.top/函数笔记.html</id>
    <published>2017-10-22T16:00:00.000Z</published>
    <updated>2018-06-25T17:24:40.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="numpy中函数"><a href="#numpy中函数" class="headerlink" title="numpy中函数"></a>numpy中函数</h2><h3 id="min-用法"><a href="#min-用法" class="headerlink" title="min()用法"></a><font color="orange" size="3">min()用法</font><br></h3><p><font color="green" size="2">&lt;求指定维度的最小值，默认求所有值的最小值&gt;</font><br></p><ul><li><p>min(): 无参，返回所有中的最小值  </p></li><li><p>min(0):&nbsp; 等价于 axis=0, 每列的最小值 </p></li><li><p>min(1):&nbsp;等价于 axis=1,每行的最小值</p></li></ul><h3 id="max-用法"><a href="#max-用法" class="headerlink" title="max()用法"></a><font color="orange" size="3"><strong>max()用法</strong></font><br></h3><p><font color="green" size="2">&lt;求指定维度的最大值，默认求所有值的最大值&gt;</font><br></p><ul><li>max(): 无参，所有中的最大值</li><li>max(0):每列的最大值</li><li>max(1):每行的最小值<a id="more"></a><h3 id="sum-用法"><a href="#sum-用法" class="headerlink" title="sum()用法"></a><font color="orange" size="3"><strong>sum()用法</strong></font><br></h3><font color="green" size="2">&lt;求给定轴上的元素的和&gt;</font><br></li><li>sum(axis=0): 求每列上的元素的和，返回一行</li><li>sum(axis=1): 求每行上元素的和，返回一列</li></ul><h3 id="tile-用法"><a href="#tile-用法" class="headerlink" title="tile()用法"></a><font color="orange" size="3"><strong>tile()用法</strong></font><br></h3><p><font color="green" size="2">&lt;重复某个数组n次&gt;</font><br></p><ul><li>tile(a,2)==tile(a,(1,2)) 重复两次一行</li><li>tile(a,(2,1) 生成一个二行一列数组</li></ul><h3 id="argsort-用法"><a href="#argsort-用法" class="headerlink" title="argsort()用法"></a><font color="orange" size="3"><strong>argsort()用法</strong></font><br></h3><p><font color="green" size="2">&lt;对矩阵进行排序，返回从小到大的索引矩阵&gt;</font><br><br><strong>二维矩阵</strong></p><ul><li>argsort(x,axis=0) 按列排序，返回所有索引矩阵</li><li>argsort(x,axis=1) 按行排序，返回所有索引矩阵<br><strong>一维</strong></li><li>argsort(x) 按列排序，返回所有从小到大索引矩阵</li><li>argsort(-x) 按列排序，返回所有从大到小索引矩阵</li></ul><h3 id="shape-用法"><a href="#shape-用法" class="headerlink" title="shape()用法"></a><font color="orange" size="3"><strong>shape()用法</strong></font><br></h3><p><font color="green" size="2">&lt;返回指定维度的长度&gt;</font><br></p><ul><li>shape([1],[2]) 返回(2L,1L)</li><li>shape(3) 返回()</li><li>shape[0] 返回第一维度长度</li></ul><hr><h2 id="matplotlib中函数"><a href="#matplotlib中函数" class="headerlink" title="matplotlib中函数"></a>matplotlib中函数</h2><h3 id="zeros-用法"><a href="#zeros-用法" class="headerlink" title="zeros()用法"></a><font color="orange" size="3"><strong>zeros()用法</strong></font><br></h3><p><font color="green" size="2">&lt;生成一个全为的0矩阵的函数&gt;</font><br></p><ul><li>zeros(m,n);生成一个m*n的零矩阵</li><li>zeros(m);生成一个m*m的零矩阵</li><li>zeros(m,n,k…);生成一个m <em> n </em> k …的零矩阵</li><li>zeros(size \ shape(A));生成一个与矩阵A的维度一致的零矩阵</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;numpy中函数&quot;&gt;&lt;a href=&quot;#numpy中函数&quot; class=&quot;headerlink&quot; title=&quot;numpy中函数&quot;&gt;&lt;/a&gt;numpy中函数&lt;/h2&gt;&lt;h3 id=&quot;min-用法&quot;&gt;&lt;a href=&quot;#min-用法&quot; class=&quot;headerlink&quot; title=&quot;min()用法&quot;&gt;&lt;/a&gt;&lt;font color=&quot;orange&quot; size=&quot;3&quot;&gt;min()用法&lt;/font&gt;&lt;br&gt;&lt;/h3&gt;&lt;p&gt;&lt;font color=&quot;green&quot; size=&quot;2&quot;&gt;&amp;lt;求指定维度的最小值，默认求所有值的最小值&amp;gt;&lt;/font&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;min(): 无参，返回所有中的最小值  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;min(0):&amp;nbsp; 等价于 axis=0, 每列的最小值 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;min(1):&amp;nbsp;等价于 axis=1,每行的最小值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;max-用法&quot;&gt;&lt;a href=&quot;#max-用法&quot; class=&quot;headerlink&quot; title=&quot;max()用法&quot;&gt;&lt;/a&gt;&lt;font color=&quot;orange&quot; size=&quot;3&quot;&gt;&lt;strong&gt;max()用法&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;&lt;/h3&gt;&lt;p&gt;&lt;font color=&quot;green&quot; size=&quot;2&quot;&gt;&amp;lt;求指定维度的最大值，默认求所有值的最大值&amp;gt;&lt;/font&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;max(): 无参，所有中的最大值&lt;/li&gt;
&lt;li&gt;max(0):每列的最大值&lt;/li&gt;
&lt;li&gt;max(1):每行的最小值
    
    </summary>
    
      <category term="随记" scheme="https://dword.top/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="numpy" scheme="https://dword.top/tags/numpy/"/>
    
      <category term="matplotlib" scheme="https://dword.top/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>k-近邻实现《机器学习实战》</title>
    <link href="https://dword.top/k-%E8%BF%91%E9%82%BB.html"/>
    <id>https://dword.top/k-近邻.html</id>
    <published>2017-09-28T16:00:00.000Z</published>
    <updated>2018-07-30T08:47:25.913Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;knn算法的实现原理是将测试数据集与样本数据集中数据对应的特征进行比较，提取k个特征最相似数据的分类标签。<br><strong>1.先做一个简单的数据</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#简单数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dataset</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    定义一个简单数据集</span></span><br><span class="line"><span class="string">    :return: train 数据集，labels 对应的标签</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    train = array([[<span class="number">1</span>, <span class="number">0.1</span>], [<span class="number">0</span>, <span class="number">0.1</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>]])</span><br><span class="line">    labels = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>]</span><br><span class="line">    <span class="keyword">return</span> train, labels</span><br></pre></td></tr></table></figure></p><p><strong>2.实现knn算法</strong><br>计算两个向量点xA和xB之间的距离需要使用到欧式距离公式  </p><p>$d(x,y)=\sqrt{(x_1-y_1)^{2}+(x_2-y_2)^{2}+(x_n-y_n)^{2}}=\sqrt{\sum_{i=1}^{n}(x_i-y_i)^{2}}$</p><p>例如，点(0,0)与(1,2)之间的距离计算为： </p><p>$\sqrt{(1-0)^{2}+(2-0)^{2}}$</p><p>如果数据集存在4个特征值， 则点(1,0,0,1)与(7,6,9,4)之间的距离计算为:</p><p>$\sqrt{(7-1)^{2}+(6-0)^{2}+(9-0)^{2}+(4-1)^{2}}$</p><a id="more"></a><p>计算完距离以后对数据进行从小到的排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Knn</span><span class="params">(inputdate, train, lablel , k)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    首先是要做欧式距离运算的，所以首先</span></span><br><span class="line"><span class="string">    1.是把输入的指矩阵进行复制可与测试的模型进行运算</span></span><br><span class="line"><span class="string">    2.排序以后取前k个相近的值进行分类</span></span><br><span class="line"><span class="string">    3.返回那个分类</span></span><br><span class="line"><span class="string">    :param inputdate: 测试数据</span></span><br><span class="line"><span class="string">    :param train: 样本数据</span></span><br><span class="line"><span class="string">    :param lablel: 样本数据标签</span></span><br><span class="line"><span class="string">    :param k: k值</span></span><br><span class="line"><span class="string">    :return: 最近标签</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment">#对输入数据做处理，跟样本数据一样的维度大小</span></span><br><span class="line">    inputdata = tile(inputdate,(train.shape[<span class="number">0</span>],<span class="number">1</span>))</span><br><span class="line">    <span class="comment">#对数据集做欧式距离运算</span></span><br><span class="line">    vla = (inputdata - train)**<span class="number">2</span></span><br><span class="line">    vlaue = (vla.sum(axis=<span class="number">1</span>))**<span class="number">0.05</span></span><br><span class="line">    <span class="comment">#返回从小到大的索引</span></span><br><span class="line">    sortval = vlaue.argsort()</span><br><span class="line">    dict = &#123;&#125;</span><br><span class="line">    <span class="comment">#取前k个值</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        <span class="comment">#保存成对应的键值对</span></span><br><span class="line">        dict[vlaue[sortval[i]]]=lablel[sortval[i]]</span><br><span class="line">    sortcalsscount = sorted(dict.items(), key=<span class="keyword">lambda</span> item: item[<span class="number">0</span>])</span><br><span class="line">    print(<span class="string">"排序以后的%"</span>,sortcalsscount)</span><br><span class="line">    <span class="keyword">return</span> sortcalsscount[<span class="number">0</span>][<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>如果想用现有的数据集，对数据集进行特征抽取，下一篇有做介绍</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;knn算法的实现原理是将测试数据集与样本数据集中数据对应的特征进行比较，提取k个特征最相似数据的分类标签。&lt;br&gt;&lt;strong&gt;1.先做一个简单的数据&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#简单数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    定义一个简单数据集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    :return: train 数据集，labels 对应的标签&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    train = array([[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    labels = [&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; train, labels&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.实现knn算法&lt;/strong&gt;&lt;br&gt;计算两个向量点xA和xB之间的距离需要使用到欧式距离公式  &lt;/p&gt;
&lt;p&gt;$d(x,y)=\sqrt{(x_1-y_1)^{2}+(x_2-y_2)^{2}+(x_n-y_n)^{2}}=\sqrt{\sum_{i=1}^{n}(x_i-y_i)^{2}}$&lt;/p&gt;
&lt;p&gt;例如，点(0,0)与(1,2)之间的距离计算为： &lt;/p&gt;
&lt;p&gt;$\sqrt{(1-0)^{2}+(2-0)^{2}}$&lt;/p&gt;
&lt;p&gt;如果数据集存在4个特征值， 则点(1,0,0,1)与(7,6,9,4)之间的距离计算为:&lt;/p&gt;
&lt;p&gt;$\sqrt{(7-1)^{2}+(6-0)^{2}+(9-0)^{2}+(4-1)^{2}}$&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="https://dword.top/categories/python/"/>
    
    
      <category term="numpy" scheme="https://dword.top/tags/numpy/"/>
    
      <category term="python" scheme="https://dword.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>算法对比</title>
    <link href="https://dword.top/%E7%AE%97%E6%B3%95%E5%AF%B9%E6%AF%94.html"/>
    <id>https://dword.top/算法对比.html</id>
    <published>2017-09-27T16:00:00.000Z</published>
    <updated>2018-06-25T17:25:29.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法分类"><a href="#算法分类" class="headerlink" title="算法分类"></a>算法分类</h2><h3 id="监督学习-输入征值-目标值。输出可以是一个连接的值-称为回归-或是有限离散值-分类"><a href="#监督学习-输入征值-目标值。输出可以是一个连接的值-称为回归-或是有限离散值-分类" class="headerlink" title="监督学习(输入征值+目标值。输出可以是一个连接的值(称为回归)或是有限离散值(分类)"></a><font color="green" size="3">监督学习(输入征值+目标值。输出可以是一个连接的值(称为回归)或是有限离散值(分类)</font><br></h3><h4 id="分类-lt-模型评估用查准率，查全率，精度，错误率-gt"><a href="#分类-lt-模型评估用查准率，查全率，精度，错误率-gt" class="headerlink" title="分类&lt;模型评估用查准率，查全率，精度，错误率&gt;"></a><font color="orange" size="3">分类&lt;模型评估用查准率，查全率，精度，错误率&gt;</font><br></h4><p>k-近邻(kneighbors)、贝叶斯(naive_bayes)分类、决策树与随机森林(randomForestClassifier)、逻辑回归(LogisticRegression)、神经网络<br></p><h4 id="回归-lt-模型评估用局方误差-gt"><a href="#回归-lt-模型评估用局方误差-gt" class="headerlink" title="回归&lt;模型评估用局方误差&gt;"></a><font color="orange" size="3">回归&lt;模型评估用局方误差&gt;</font><br></h4><p>线性回归(LinearRegression)、岭回归(Ridge)<br></p><h4 id="标注-隐马尔可夫模型"><a href="#标注-隐马尔可夫模型" class="headerlink" title="标注 隐马尔可夫模型"></a><font color="orange" size="3">标注 隐马尔可夫模型</font><br></h4><h3 id="无监督学习-输入特征值推测新的结果"><a href="#无监督学习-输入特征值推测新的结果" class="headerlink" title="无监督学习(输入特征值推测新的结果)"></a><font color="green" size="3">无监督学习(输入特征值推测新的结果)</font><br></h3><p>&nbsp;聚类 k-means</p><a id="more"></a><hr><h2 id="算法优缺点对比"><a href="#算法优缺点对比" class="headerlink" title="算法优缺点对比"></a>算法优缺点对比</h2><h3 id="k-近邻-小数据场景，几千-几万样本"><a href="#k-近邻-小数据场景，几千-几万样本" class="headerlink" title="k-近邻(小数据场景，几千~几万样本)"></a>k-近邻(小数据场景，几千~几万样本)</h3><p>采用欧式距离公式计算亮点之间的距离</p><ul><li>优点<br>&nbsp;&nbsp;简单，易于理解，易于实现，无需估计参数，无需训练<br></li><li>缺点<br>&nbsp;&nbsp;1.  测试样本计算量打，内存开销大<br><br>&nbsp;&nbsp;2. 必须指定k值，k值选择不当则分类精度不能保证</li></ul><hr><h3 id="朴素贝叶斯分类-MultinomiaLNB"><a href="#朴素贝叶斯分类-MultinomiaLNB" class="headerlink" title="朴素贝叶斯分类(MultinomiaLNB)"></a>朴素贝叶斯分类(MultinomiaLNB)</h3><ul><li>优点：<br><br>&nbsp;&nbsp;1.有稳定的分类效率<br>&nbsp;&nbsp;2.对确实数据不太敏感，算法也比较简单，常用于文本分类。<br>&nbsp;&nbsp;3.分类准确度高，速度快。  </li><li>缺点：<br>&nbsp;&nbsp;  需要知道先验概率P（F1，F2…|C).因此在某些时候会犹豫假设的先验模型的原因导致预测效果不佳。<br></li></ul><hr><h3 id="kmeans"><a href="#kmeans" class="headerlink" title="kmeans"></a>kmeans</h3><ul><li><p>特点分析：采用迭代式算法，直观易懂并且非常实用。  </p></li><li><p>缺点：容易收敛到局部最优解(多次聚类)<br><br>&nbsp;&nbsp;需要预先设定簇的数量(k-means++解决)</p></li></ul><hr><h3 id="随机森林-大数据集"><a href="#随机森林-大数据集" class="headerlink" title="随机森林(大数据集)"></a>随机森林(大数据集)</h3><p>&nbsp;&nbsp;1. 在当前所有算法中，具有极好的准确率。<br><br>&nbsp;&nbsp;2. 能够有效的运行在大数据集上。<br><br>&nbsp;&nbsp;3. 能够处理高维特征，不需要降维。<br><br>&nbsp;&nbsp;4. 能够评估各个特征在分类问题上的重要性。<br><br>&nbsp;&nbsp;5. 对于缺省值问题也能够活得很好的结果。<br></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;算法分类&quot;&gt;&lt;a href=&quot;#算法分类&quot; class=&quot;headerlink&quot; title=&quot;算法分类&quot;&gt;&lt;/a&gt;算法分类&lt;/h2&gt;&lt;h3 id=&quot;监督学习-输入征值-目标值。输出可以是一个连接的值-称为回归-或是有限离散值-分类&quot;&gt;&lt;a href=&quot;#监督学习-输入征值-目标值。输出可以是一个连接的值-称为回归-或是有限离散值-分类&quot; class=&quot;headerlink&quot; title=&quot;监督学习(输入征值+目标值。输出可以是一个连接的值(称为回归)或是有限离散值(分类)&quot;&gt;&lt;/a&gt;&lt;font color=&quot;green&quot; size=&quot;3&quot;&gt;监督学习(输入征值+目标值。输出可以是一个连接的值(称为回归)或是有限离散值(分类)&lt;/font&gt;&lt;br&gt;&lt;/h3&gt;&lt;h4 id=&quot;分类-lt-模型评估用查准率，查全率，精度，错误率-gt&quot;&gt;&lt;a href=&quot;#分类-lt-模型评估用查准率，查全率，精度，错误率-gt&quot; class=&quot;headerlink&quot; title=&quot;分类&amp;lt;模型评估用查准率，查全率，精度，错误率&amp;gt;&quot;&gt;&lt;/a&gt;&lt;font color=&quot;orange&quot; size=&quot;3&quot;&gt;分类&amp;lt;模型评估用查准率，查全率，精度，错误率&amp;gt;&lt;/font&gt;&lt;br&gt;&lt;/h4&gt;&lt;p&gt;k-近邻(kneighbors)、贝叶斯(naive_bayes)分类、决策树与随机森林(randomForestClassifier)、逻辑回归(LogisticRegression)、神经网络&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&quot;回归-lt-模型评估用局方误差-gt&quot;&gt;&lt;a href=&quot;#回归-lt-模型评估用局方误差-gt&quot; class=&quot;headerlink&quot; title=&quot;回归&amp;lt;模型评估用局方误差&amp;gt;&quot;&gt;&lt;/a&gt;&lt;font color=&quot;orange&quot; size=&quot;3&quot;&gt;回归&amp;lt;模型评估用局方误差&amp;gt;&lt;/font&gt;&lt;br&gt;&lt;/h4&gt;&lt;p&gt;线性回归(LinearRegression)、岭回归(Ridge)&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&quot;标注-隐马尔可夫模型&quot;&gt;&lt;a href=&quot;#标注-隐马尔可夫模型&quot; class=&quot;headerlink&quot; title=&quot;标注 隐马尔可夫模型&quot;&gt;&lt;/a&gt;&lt;font color=&quot;orange&quot; size=&quot;3&quot;&gt;标注 隐马尔可夫模型&lt;/font&gt;&lt;br&gt;&lt;/h4&gt;&lt;h3 id=&quot;无监督学习-输入特征值推测新的结果&quot;&gt;&lt;a href=&quot;#无监督学习-输入特征值推测新的结果&quot; class=&quot;headerlink&quot; title=&quot;无监督学习(输入特征值推测新的结果)&quot;&gt;&lt;/a&gt;&lt;font color=&quot;green&quot; size=&quot;3&quot;&gt;无监督学习(输入特征值推测新的结果)&lt;/font&gt;&lt;br&gt;&lt;/h3&gt;&lt;p&gt;&amp;nbsp;聚类 k-means&lt;/p&gt;
    
    </summary>
    
      <category term="随记" scheme="https://dword.top/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="机器学习算法" scheme="https://dword.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>在Hexo中渲染MathJax数学公式</title>
    <link href="https://dword.top/hexo%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%B8%B2%E6%9F%93.html"/>
    <id>https://dword.top/hexo数学公式渲染.html</id>
    <published>2017-08-10T16:00:00.000Z</published>
    <updated>2018-06-25T17:23:50.105Z</updated>
    
    <content type="html"><![CDATA[<h2 id="转-https-www-jianshu-com-p-7ab21c7f0674"><a href="#转-https-www-jianshu-com-p-7ab21c7f0674" class="headerlink" title="转: https://www.jianshu.com/p/7ab21c7f0674"></a>转: <a href="https://www.jianshu.com/p/7ab21c7f0674" target="_blank" rel="nofollow">https://www.jianshu.com/p/7ab21c7f0674</a></h2><p>在用markdown写技术文档时，免不了会碰到数学公式。常用的Markdown编辑器都会集成<a href="https://link.jianshu.com?t=https%3A%2F%2Fwww.mathjax.org%2F" target="_blank" rel="nofollow">Mathjax</a>，用来渲染文档中的类Latex格式书写的数学公式。基于Hexo搭建的个人博客，默认情况下渲染数学公式却会出现各种各样的问题。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>Hexo默认使用”hexo-renderer-marked”引擎渲染网页，该引擎会把一些特殊的markdown符号转换为相应的html标签，比如在markdown语法中，下划线’_’代表斜体，会被渲染引擎处理为&lt;em&gt;标签。<br>因为类Latex格式书写的数学公式下划线 ‘_’ 表示下标，有特殊的含义，如果被强制转换为<code>&lt;em&gt;</code>标签，那么MathJax引擎在渲染数学公式的时候就会出错。例如，$x_i$在开始被渲染的时候，处理为$x<code>&lt;em&gt;</code>i<code>&lt;/em&gt;</code>$，这样MathJax引擎就认为该公式有语法错误，因为不会渲染。<br>类似的语义冲突的符号还包括’*’, ‘{‘, ‘}’, ‘\’等。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>解决方案有很多，可以网上搜下，为了节省大家的时间，这里只提供亲身测试过的最靠谱的方法。<br>更换Hexo的markdown渲染引擎，<a href="https://link.jianshu.com?t=https%3A%2F%2Fgithub.com%2Fsun11%2Fhexo-renderer-kramed" target="_blank" rel="nofollow">hexo-renderer-kramed</a>引擎是在默认的渲染引擎<a href="https://link.jianshu.com?t=https%3A%2F%2Fgithub.com%2Fhexojs%2Fhexo-renderer-marked" target="_blank" rel="nofollow">hexo-renderer-marked</a>的基础上修改了一些bug，两者比较接近，也比较轻量级。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">uninstall</span> hexo-renderer-marked <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-renderer-kramed <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p>执行上面的命令即可，先卸载原来的渲染引擎，再安装新的。<br><a id="more"></a><br>然后，跟换引擎后行间公式可以正确渲染了，但是这样还没有完全解决问题，行内公式的渲染还是有问题，因为<a href="https://link.jianshu.com?t=https%3A%2F%2Fgithub.com%2Fsun11%2Fhexo-renderer-kramed" target="_blank" rel="nofollow">hexo-renderer-kramed</a>引擎也有语义冲突的问题。接下来到博客根目录下，找到node_modules\kramed\lib\rules\inline.js，把第11行的escape变量的值做相应的修改：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  escape: /^\\([<span class="string">\\`*&#123;&#125;\[\</span>](<span class="link"></span>)#$+\-.!_&amp;gt;])/,</span><br><span class="line">escape: /^\\([<span class="string">`*\[\</span>](<span class="link"></span>)#$+\-.!_&amp;gt;])/</span><br></pre></td></tr></table></figure><p>这一步是在原基础上取消了对\,{,}的转义(escape)。<br><br>同时把第20行的em变量也要做相应的修改。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  em: /^<span class="symbol">\b</span>_((?:__|[<span class="symbol">\s</span><span class="symbol">\S</span>])+?)_<span class="symbol">\b</span>|^<span class="symbol">\*</span>((?:<span class="symbol">\*</span><span class="symbol">\*</span>|[<span class="symbol">\s</span><span class="symbol">\S</span>])+?)<span class="symbol">\*</span>(?!<span class="symbol">\*</span>)/,</span><br><span class="line">em: /^<span class="symbol">\*</span>((?:<span class="symbol">\*</span><span class="symbol">\*</span>|[<span class="symbol">\s</span><span class="symbol">\S</span>])+?)<span class="symbol">\*</span>(?!<span class="symbol">\*</span>)/</span><br></pre></td></tr></table></figure><p>重新启动hexo（先clean再generate）,问题完美解决。哦，如果不幸还没解决的话，看看是不是还需要在使用的主题中配置mathjax开关。</p><h2 id="在主题中开启mathjax开关"><a href="#在主题中开启mathjax开关" class="headerlink" title="在主题中开启mathjax开关"></a>在主题中开启mathjax开关</h2><p>如何使用了主题了，别忘了在主题（Theme）中开启mathjax开关，下面以next主题为例，介绍下如何打开mathjax开关。<br>进入到主题目录，找到_config.yml配置问题，把mathjax默认的false修改为true，具体如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MathJax Support</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>别着急，这样还不够，还需要在文章的Front-matter里打开mathjax开关，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">index.html</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2016</span><span class="bullet">-12</span><span class="bullet">-28</span> <span class="number">21</span><span class="string">:01:30</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">true</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-</span></span><br></pre></td></tr></table></figure><p>不要嫌麻烦，之所以要在文章头里设置开关，是因为考虑只有在用到公式的页面才加载 Mathjax，这样不需要渲染数学公式的页面的访问速度就不会受到影响了。<br>最后，试过好多网上写的各种配置，折腾了一天，这个是一次就成功的，在这里真心感谢作者！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;转-https-www-jianshu-com-p-7ab21c7f0674&quot;&gt;&lt;a href=&quot;#转-https-www-jianshu-com-p-7ab21c7f0674&quot; class=&quot;headerlink&quot; title=&quot;转: https://www.jianshu.com/p/7ab21c7f0674&quot;&gt;&lt;/a&gt;转: &lt;a href=&quot;https://www.jianshu.com/p/7ab21c7f0674&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;https://www.jianshu.com/p/7ab21c7f0674&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在用markdown写技术文档时，免不了会碰到数学公式。常用的Markdown编辑器都会集成&lt;a href=&quot;https://link.jianshu.com?t=https%3A%2F%2Fwww.mathjax.org%2F&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Mathjax&lt;/a&gt;，用来渲染文档中的类Latex格式书写的数学公式。基于Hexo搭建的个人博客，默认情况下渲染数学公式却会出现各种各样的问题。&lt;/p&gt;
&lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h2&gt;&lt;p&gt;Hexo默认使用”hexo-renderer-marked”引擎渲染网页，该引擎会把一些特殊的markdown符号转换为相应的html标签，比如在markdown语法中，下划线’_’代表斜体，会被渲染引擎处理为&amp;lt;em&amp;gt;标签。&lt;br&gt;因为类Latex格式书写的数学公式下划线 ‘_’ 表示下标，有特殊的含义，如果被强制转换为&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;标签，那么MathJax引擎在渲染数学公式的时候就会出错。例如，$x_i$在开始被渲染的时候，处理为$x&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;i&lt;code&gt;&amp;lt;/em&amp;gt;&lt;/code&gt;$，这样MathJax引擎就认为该公式有语法错误，因为不会渲染。&lt;br&gt;类似的语义冲突的符号还包括’*’, ‘{‘, ‘}’, ‘\’等。&lt;/p&gt;
&lt;h2 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h2&gt;&lt;p&gt;解决方案有很多，可以网上搜下，为了节省大家的时间，这里只提供亲身测试过的最靠谱的方法。&lt;br&gt;更换Hexo的markdown渲染引擎，&lt;a href=&quot;https://link.jianshu.com?t=https%3A%2F%2Fgithub.com%2Fsun11%2Fhexo-renderer-kramed&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;hexo-renderer-kramed&lt;/a&gt;引擎是在默认的渲染引擎&lt;a href=&quot;https://link.jianshu.com?t=https%3A%2F%2Fgithub.com%2Fhexojs%2Fhexo-renderer-marked&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;hexo-renderer-marked&lt;/a&gt;的基础上修改了一些bug，两者比较接近，也比较轻量级。&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm &lt;span class=&quot;keyword&quot;&gt;uninstall&lt;/span&gt; hexo-renderer-marked &lt;span class=&quot;comment&quot;&gt;--save&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; hexo-renderer-kramed &lt;span class=&quot;comment&quot;&gt;--save&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行上面的命令即可，先卸载原来的渲染引擎，再安装新的。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://dword.top/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://dword.top/tags/hexo/"/>
    
      <category term="MathJax" scheme="https://dword.top/tags/MathJax/"/>
    
      <category term="Latex" scheme="https://dword.top/tags/Latex/"/>
    
  </entry>
  
</feed>
